README ‚Äì MongoDB Local S√©curis√©

    Objectif : repartir proprement apr√®s un reboot ou une nouvelle session WSL.

1. Lancer MongoDB avec authentification

mongod --port 48247 --dbpath /tmp/mongo_dummy --auth

    Garde ce terminal ouvert (MongoDB tourne dedans).

2. Ouvrir un second terminal (WSL)
a) Se connecter en super-admin

mongosh --port 48247 -u mongoConnectPMaintenance93 -p --authenticationDatabase admin

    Mot de passe : Mp93xz159357

b) Se connecter en utilisateur blog

mongosh --port 48247 -u blogUser -p --authenticationDatabase blog

    Mot de passe : blogPass123

3. Commandes utiles dans mongosh

| Action                        | Commande                                              |
| ----------------------------- | ----------------------------------------------------- |
| Lister les bases (admin only) | `show dbs`                                            |
| Utiliser la base blog         | `use blog`                                            |
| Voir collections              | `show collections`                                    |
| Cr√©er un document             | `db.posts.insertOne({title: "Hello", body: "World"})` |
| Lire documents                | `db.posts.find()`                                     |

4. Arr√™ter MongoDB proprement
Dans le terminal MongoDB, appuyer sur :
Ctrl+C
5. Sauvegarde des mots de passe

| User                         | Mot de passe   | R√¥le                  |
| ---------------------------- | -------------- | --------------------- |
| `mongoConnectPMaintenance93` | `Mp93xz159357` | super-admin           |
| `blogUser`                   | `blogPass123`  | read/write sur `blog` |


üîß Gestion des utilisateurs ‚Äì commandes dans mongosh

    Pr√©-requis : √™tre connect√© avec le super-admin
    mongosh --port 48247 -u mongoConnectPMaintenance93 -p --authenticationDatabase admin

‚úÖ Cr√©er un nouvel admin (global)

use admin
db.createUser({
  user: "nouvelAdmin",
  pwd: "NouveauPass123",
  roles: [ { role: "userAdminAnyDatabase", db: "admin" }, "readWriteAnyDatabase" ]
})

‚úÖ Cr√©er un utilisateur blog (base blog uniquement)

use blog
db.createUser({
  user: "nouveauBlogUser",
  pwd: "blogPass123",
  roles: [ { role: "readWrite", db: "blog" } ]
})

‚úÖ Supprimer un utilisateur admin

use admin
db.dropUser("nomAdminASupprimer")

‚úÖ Supprimer un utilisateur blog

use blog
db.dropUser("nomBlogUserASupprimer")

‚úÖ Lister tous les utilisateurs (admin only)

use admin
db.system.users.find().forEach(printjson)
<!-- ___________________________EXPLICATIONS __________________________________ -->

‚úÖ Ce qu‚Äôon peut faire vraiment dans MongoDB :

| Compte MongoDB    | Base   | Collection                           | Droits                |
| ----------------- | ------ | ------------------------------------ | --------------------- |
| `blogUser`        | `blog` | **toutes** (posts, users, comments‚Ä¶) | `readWrite`           |
| `blogUserLimited` | `blog` | **seulement `users`**                | `read` ou `readWrite` |

‚ùå Ce qu‚Äôon ne peut pas faire :

    Limiter un compte MongoDB √† une seule ligne (un seul document) d‚Äôune collection.
    Limiter √† une "table" au sens SQL ‚Äì on limite √† une collection enti√®re, pas √† un sous-ensemble.

‚úÖ Exemple concret :
Tu cr√©es un r√¥le personnalis√© :

use admin
db.createRole({
  role: "usersCollectionOnly",
  roles: [],
  privileges: [
    { resource: { db: "blog", collection: "users" }, actions: ["find", "update", "insert"] }
  ]
})

use blog
db.createUser({
  user: "employeUsers",
  pwd: "empPass123",
  roles: ["usersCollectionOnly"]
})

R√©sultat :

    employeUsers ne peut toucher que la collection users de la base blog.
    Il ne voit pas posts, comments, etc.

Donc :
Oui, tu peux limiter un compte MongoDB √† une (ou plusieurs) collection(s) ‚Äì mais pas √† une ligne.


‚úÖ Sauvegarde avec mongodump

mongodump --port 48247 -u blogUser -p --authenticationDatabase blog --db blog --out ~/backup

--port 48247 ‚Üí port sur lequel tourne ton instance MongoDB

-u blogUser ‚Üí nom de l‚Äôutilisateur

-p ‚Üí demande le mot de passe (si tu veux l‚Äô√©crire en ligne de commande : -pTonMotDePasse)

--authenticationDatabase blog ‚Üí base utilis√©e pour l‚Äôauthentification

--db blog ‚Üí base que tu veux sauvegarder

--out ~/backup ‚Üí r√©pertoire de destination de la sauvegarde

‚ö†Ô∏è Par s√©curit√©, il est conseill√© de laisser -p vide pour entrer le mot de passe de fa√ßon interactive.

‚úÖ Restauration avec mongorestore

mongorestore --port 48247 -u blogUser -p --authenticationDatabase blog --db blog --drop ~/backup/blog

--drop permet de supprimer les collections existantes avant restauration (utile pour √©viter les doublons).

Le chemin ~/backup/blog correspond au dossier cr√©√© par mongodump.

üì¶ MongoDB ‚Äì Sauvegarde et Restauration
Sauvegarde (mongodump)

Pour sauvegarder la base blog :

mongodump --port 48247 -u blogUser -p --authenticationDatabase blog --db blog --out ~/backup

--port 48247 ‚Üí port de l‚Äôinstance MongoDB

-u blogUser ‚Üí utilisateur

-p ‚Üí mot de passe (laisser vide pour le saisir en mode interactif)

--authenticationDatabase blog ‚Üí base d‚Äôauthentification

--db blog ‚Üí base √† sauvegarder

--out ~/backup ‚Üí r√©pertoire de sortie

üìå Exemple :

mongodump --port 48247 -u blogUser -pMonMotDePasse --authenticationDatabase blog --db blog --out ~/backup

Restauration (mongorestore)

Pour restaurer la base blog depuis une sauvegarde :

mongorestore --port 48247 -u blogUser -p --authenticationDatabase blog --db blog --drop ~/backup/blog

--drop : supprime les collections existantes avant restauration (√©vite les doublons)

~/backup/blog : chemin du dossier cr√©√© par mongodump

‚úÖ Avec √ßa, on a un cycle complet Backup / Restore pr√™t √† √™tre utilis√©.

‚öôÔ∏è Initialisation MongoDB (base + utilisateur)
Connexion √† MongoDB en mode admin

mongo --port 48247

Cr√©ation de la base et de l‚Äôutilisateur

Dans le shell MongoDB :

// S√©lection de la base
use blog

// Cr√©ation de l‚Äôutilisateur
db.createUser({
  user: "blogUser",
  pwd: "MonMotDePasseS√©curis√©",
  roles: [
    { role: "readWrite", db: "blog" }
  ]
})


user : nom de l‚Äôutilisateur

pwd : mot de passe associ√©

roles : permissions accord√©es (ici lecture/√©criture sur la base blog)

V√©rification de la connexion

Depuis le terminal :

mongo --port 48247 -u blogUser -p --authenticationDatabase blog

üëâ Avec √ßa, ton README couvre :

Cr√©ation d‚Äôun utilisateur et d‚Äôune base

Connexion s√©curis√©e

Sauvegarde avec mongodump

Restauration avec mongorestore




<!-- LANCEMENT DE MONGO  -->


./start-mongo.sh

ou mongodb://127.0.0.1:27018   avec le nouveau port et surtout la nouvelle installation 

<!-- ___________________________________________________________________________ -->


    


    A FAIRE AVANT DE TRAVAILLER AVEC MONGO (BONNE PRATIQUE )

    V√©rification rapide en 1 commande

Ouvre PowerShell (m√™me normale, pas besoin d‚Äôadmin)

Tape exactement ceci :

(Get-Service MongoDB).Status

R√©sultat possible :

Running ‚Üí MongoDB est pr√™t ‚úÖ

Stopped ‚Üí MongoDB n‚Äôest pas d√©marr√©, il faut lancer :

Start-Service MongoDB



    üîπ Comment faire vite et simple

V√©rifier via PowerShell (rapide) (clique droit pour ouvrir en tant qu'administrateur)

Get-Service | Where-Object {$_.DisplayName -like "*Mongo*"}

Si tu vois Running ‚Üí tu peux travailler

Si tu vois Stopped ‚Üí fais

Start-Service "MongoDB Server"

Ou via MongoDB Compass

Ouvre Compass

Essaie de te connecter √† mongodb://localhost:27017

S‚Äôil se connecte ‚Üí Mongo tourne ‚Üí tu peux travailler

Optionnel : cr√©er un petit raccourci ou script pour lancer Mongo automatiquement si jamais il n‚Äôest pas d√©marr√©.

üí° Astuce pratique : une fois que tu as confirm√© que le service MongoDB d√©marre automatiquement avec Windows (ce qui est le cas par d√©faut), tu n‚Äôauras presque jamais besoin de v√©rifier.
Tu peux juste ouvrir mongosh ou Compass et commencer √† coder.


FUNCTION CREEE PAR KIMI POUR VERIFIER ET POUR LANCER MONGO ::


function Test-MongoService {
    <#
    .SYNOPSIS
        V√©rifie et (√©ventuellement) d√©marre MongoDB.
    .DESCRIPTION
        - Si le service Windows ¬´ MongoDB ¬ª n‚Äôexiste pas ‚Üí propose une installation ultra-light.
        - Si le service existe mais n‚Äôest pas running ‚Üí le d√©marre.
        - Renvoie un objet synth√©tique + messages color√©s.
    #>
    [CmdletBinding()]
    param(
        [switch]$SkipInstallPrompt   # passer cette switch pour ne JAMAIS proposer l‚Äôinstall
    )

    $svc = Get-Service -Name "MongoDB" -ErrorAction SilentlyContinue

    if (-not $svc) {
        Write-Host "[X] Service MongoDB introuvable" -ForegroundColor Red

        if (-not $SkipInstallPrompt) {
            $rep = Read-Host "  => Le cr√©er/d√©marrer automatiquement ? (o/n)"
            if ($rep -eq "o") {
                # R√©pertoires par d√©faut (tu peux changer ici)
                $dataPath = "$env:ProgramData\MongoDB\data\db"
                $logPath  = "$env:ProgramData\MongoDB\log"

                # Cr√©ation des dossiers
                New-Item -ItemType Directory -Force -Path $dataPath | Out-Null
                New-Item -ItemType Directory -Force -Path $logPath  | Out-Null

                # G√©n√©ration d‚Äôun fichier de config minimal
                $cfgFile = "$env:ProgramData\MongoDB\mongod.cfg"
                @"
systemLog:
  destination: file
  path: $logPath\mongod.log
storage:
  dbPath: $dataPath
"@ | Out-File -FilePath $cfgFile -Encoding ASCII -Force

                # Installation du service
                try {
                    & mongod --install --config $cfgFile --serviceName "MongoDB" --serviceDisplayName "MongoDB"
                    Start-Service MongoDB
                    Write-Host "[OK] Service MongoDB install√© et d√©marr√©." -ForegroundColor Green
                    return [PSCustomObject]@{
                        ServiceName = "MongoDB"
                        Status      = (Get-Service MongoDB).Status
                        Pid         = (Get-CimInstance Win32_Service -Filter "Name='MongoDB'").ProcessId
                    }
                }
                catch {
                    Write-Host "[ERREUR] Impossible d‚Äôinstaller le service :" $_ -ForegroundColor Red
                    return
                }
            }
        }
        return
    }

    # Le service existe : on v√©rifie son statut
    if ($svc.Status -ne 'Running') {
        Write-Host "[~] Service MongoDB pr√©sent mais arr√™t√©. D√©marrage en cours‚Ä¶" -ForegroundColor Yellow
        try {
            Start-Service $svc -ErrorAction Stop
            Write-Host "[OK] Service MongoDB d√©marr√©." -ForegroundColor Green
        }
        catch {
            Write-Host "[ERREUR] Impossible de d√©marrer le service :" $_ -ForegroundColor Red
            return
        }
    }
    else {
        Write-Host "[OK] Service MongoDB d√©j√† en cours d'ex√©cution." -ForegroundColor Green
    }

    # Petit r√©sum√©
    [PSCustomObject]@{
        ServiceName = $svc.Name
        Status      = $svc.Status
        Pid         = (Get-CimInstance Win32_Service -Filter "Name='$($svc.Name)'").ProcessId
    }
}

Utilisation rapide :

# Charge la fonction (ou mets-la dans ton $PROFILE)
. .\mongo_helpers.ps1

# Lance la v√©rif
Test-MongoService

R√©sultat typique :

[OK] Service MongoDB d√©j√† en cours d'ex√©cution.

ServiceName Status Pid
----------- ------ ---
MongoDB    Running 1234

